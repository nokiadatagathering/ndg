<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:mx="library://ns.adobe.com/flex/mx"
    creationComplete="init()"
    dropEnabled="false"    
    maxHorizontalScrollPosition="700"
    rollOverColor="#eef9ff"
    selectionDuration="1"
    editable="false" 
    enabled="true"
    allowMultipleSelection="true" 
    labelFunction="treeLabel"    
    dataDescriptor="{new MyCustomTreeDataDescriptor()}"
	horizontalScrollPolicy="auto">

<!-- Renderer #1 -->
<!--    <mx:itemRenderer>
        <fx:Component>
            <s:MXTreeItemRenderer height="20">
                <s:HGroup left="0" right="0" verticalAlign="middle">
                    <s:Rect id="indentationSpacer" 
                        width="{treeListData.indent}" percentHeight="100" 
                        alpha="0">
                        <s:fill>
                            <s:SolidColor color="0xFFFFFF" />
                        </s:fill>
                    </s:Rect>
                    <s:Group id="disclosureGroup">
                        <s:BitmapImage source="{treeListData.disclosureIcon}"
                                       visible="{treeListData.hasChildren}" />
                    </s:Group>
                    <s:BitmapImage source="{treeListData.icon}"/>
                    <s:Label id="labelDisplay" text="{treeListData.label}" paddingTop="2"/>
                </s:HGroup>
            </s:MXTreeItemRenderer>
        </fx:Component>
    </mx:itemRenderer> -->

<!-- Renderer #2 -->
<!--<mx:itemRenderer>
        <fx:Component>
            <s:MXTreeItemRenderer height="20">
                <s:states>
                    <s:State name="normal"/>
                    <s:State name="hovered"/>
                    <s:State name="selected"/>
                </s:states>

                <s:transitions>
                    <s:Transition fromState="*"
                                  toState="*">
                        <s:Fade duration="600"
                                target="{desc}"/>
                    </s:Transition>
                </s:transitions>
                <s:HGroup left="0"
                        right="0"
                        top="0"
                        bottom="0"
                        verticalAlign="middle">
                    <s:Rect id="indentationSpacer"
                            width="{treeListData.indent}"
                            percentHeight="100"
                            alpha="0">
                        <s:fill>
                            <s:SolidColor color="0xFFFFFF"/>
                        </s:fill>
                    </s:Rect>
                    <s:Group id="disclosureGroup">
                        <s:BitmapImage source="{treeListData.disclosureIcon}"
                            visible="{treeListData.hasChildren}"/>
                    </s:Group>
                    <s:BitmapImage source="{treeListData.icon}"/>
                    <s:Label id="labelField"
                            text="{treeListData.label}"
                            paddingTop="2"/>
                    <s:Label id="desc"
                            text="{data.@desc}"
                            paddingTop="2"
                            paddingBottom="2"
                            includeIn="selected"
                            textAlign="center"
                            fontWeight="bold"
                            showEffect="Fade"
                            visible="{!treeListData.hasChildren}"/>
                </s:HGroup>
            </s:MXTreeItemRenderer>
        </fx:Component>
</mx:itemRenderer> -->

<!-- Renderer #3 -->
<mx:itemRenderer>
                <fx:Component>
                    <s:MXTreeItemRenderer>
                        <s:states>
                            <s:State name="normal" />            
                            <s:State name="hovered" />
                            <s:State name="selected" />
                        </s:states>
                        <s:HGroup left="0" right="0" verticalAlign="middle">
                            <s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
                                <s:fill>
                                    <s:SolidColor color="0xFFFFFF" />
                                </s:fill>
                            </s:Rect>
                            <s:Group id="disclosureGroup">
                                <s:BitmapImage source="{treeListData.disclosureIcon}" visible="{treeListData.hasChildren}" />
                            </s:Group>
                            <s:BitmapImage source="{treeListData.icon}"/>
                            <s:Label text="{treeListData.label}" color.hovered="0xFF0000" color.selected="0xFFFFFF" paddingTop="2" />
                        </s:HGroup>
                    </s:MXTreeItemRenderer>
                </fx:Component>
            </mx:itemRenderer>

<fx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import mx.events.DragEvent;
		import mx.core.EdgeMetrics;
		
		import mx.core.DragSource;
		import mx.managers.DragManager;
		import mx.events.*;
		import mx.core.UIComponent;
		import mx.containers.Canvas;
		
		import main.br.org.indt.ndg.controller.editor.*;
		import main.br.org.indt.ndg.ui.view.editor.EditorEditSurveys;
		
		//SHOULD be static
		public const NODE_CATEGORY:String = "category";
		public const NODE_DESCRIPTION:String = "description";
		
		public var lastSelectedItem:Object = null;
		private var flag:Boolean = true;
		
		
		private function init():void{
			setStyle("selectionDuration", 100);	
		}
		
		public function populateTree(): void {
		    dataProvider = Survey.getInstance().getContentList();
		}
		
		public function resetView():void{
			Survey.getInstance().reset();
			dataProvider = Survey.getInstance().getContentList();
		}
		
		public function treeLabel(item:Object):String {
			var node:XML = XML(item);
		    var nodeName:String = node.localName() as String;
		     	
		    if(nodeName == "category"){     
		    	return node.@name;
		    } else if (nodeName == "question"){
		        return (node.description);
		    } else if (nodeName == "description" || nodeName == "length" 
		    	|| nodeName == "low" || nodeName == "high" 
		    	|| nodeName == "select" || nodeName == "item"){
		       	return nodeName;
			}else return node.toString();
		}

		public function onDragDrop(event:DragEvent, mainView:EditorEditSurveys): void{
			var payload:Payload = new Payload();
			payload.setView(this);
			payload.setExtraView(mainView);
			payload.setEvent(event);
					    
		    var controllerEvent:ControllerEvent = new ControllerEvent(EventTypes.TREE_DRAGDROP_EVENT, payload);//this, event);
			FrontController.getInstance().dispatch(controllerEvent);			
		}
		
		public function onDragEnter(event:DragEvent): void{
			// Get the drop target component from the event object.
	        var dropTarget:Tree=Tree(event.currentTarget);
	        // Accept the drag only if the user is dragging data
			// identified by the 'color' format value.
	        if (event.dragSource.hasFormat('qType')) {
	        	mx.managers.DragManager.acceptDragDrop(dropTarget);
	        }
		}
		
		public function onDragOver(event:DragEvent): void {
			var dropTarget:Tree = Tree(event.currentTarget);
	     	var r:int = dropTarget.calculateDropIndex(event);
	        selectedIndex = r;
		}	
			
		public function	onItemClick(mainView:EditorEditSurveys, nIndex:int):void {
			var payload:Payload = new Payload();
			payload.setView(this);
			payload.setExtraView(mainView);
			switch (nIndex) {
				case 0: payload.setCategoryText("category"); break;
				case Question.QUESTION_STRING: payload.setCategoryText(Question.STRING_TYPE); break;
				case Question.QUESTION_INTEGER: payload.setCategoryText(Question.INTEGER_TYPE); break;
				case Question.QUESTION_DATE: payload.setCategoryText(Question.DATE_TYPE); break;
				case Question.QUESTION_TIME: payload.setCategoryText(Question.TIME_TYPE); break;
				case Question.QUESTION_CHOICE_EXCLUSIVE: payload.setCategoryText(Question.CHOICE_EXCLUSIVE_TYPE); break;
				case Question.QUESTION_CHOICE: payload.setCategoryText(Question.CHOICE_TYPE); break;
				case Question.QUESTION_IMAGE: payload.setCategoryText(Question.IMAGE_TYPE); break;
			}
		    var controllerEvent:ControllerEvent = new ControllerEvent(EventTypes.ADD_ITEMTREE_EVENT, payload);
			FrontController.getInstance().dispatch(controllerEvent);
		}
	]]>
</fx:Script>


</mx:Tree>

